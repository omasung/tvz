
spring.datasource.url=jdbc:postgresql://localhost:5432/social
spring.datasource.username=tvz
spring.datasource.password=password
spring.jpa.generate-ddl=true
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driverClassName=org.postgresql.Driver

#Load Data From data.sql into Database
spring.datasource.initialization-mode=always

#Redis and Jedis =====================
# Database index used by the connection factory.
spring.redis.database=0 
# Redis server host.
spring.redis.host=localhost
# Redis server port.
spring.redis.port=52300
# Login password of the redis server.
#spring.redis.password=mypass
# Connection timeout in milliseconds.
spring.redis.timeout=60000

# Mail server properties
spring.mail.default-encoding=UTF-8
spring.mail.host=smtp.sendgrid.net
#spring.mail.host=smtp.smee.ng
spring.mail.port=465
spring.mail.username=apikey
spring.mail.password=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

# Other properties
spring.mail.properties.mail.debug=true
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
 
# TLS , port 587
#spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.properties.mail.smtp.starttls.required=true
 
# SSL, post 465
spring.mail.properties.mail.smtp.ssl.enable = true
spring.mail.properties.mail.smtp.socketFactory.port = 465
spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory

#=======================================

#server port
server.port = 80

# JSP configs
spring.mvc.view.prefix: /WEB-INF/views/
spring.mvc.view.suffix: .jsp

# SessionFactory
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.current_session_context_class = org.springframework.orm.hibernate5.SpringSessionContext

# HTTP response compression (GzipFilterProperties)

# Whether response compression is enabled.
server.compression.enabled=true

# Comma-separated list of MIME types that should be compressed.
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml,image/jpeg,image/png,image/gif,image/bmp,image/tiff,application/hal+json

# Minimum "Content-Length" value that is required for compression to be performed.
server.compression.min-response-size=1024

# Whether to enable HTTP/2 support, if the current environment supports it.
server.http2.enabled=true

# Maximum time the response should be cached (in seconds) 
spring.resources.cache.cachecontrol.max-age=120

# The cache must re-validate stale resources with the server. Any expired resources must not be used without re-validating.
spring.resources.cache.cachecontrol.must-revalidate=true

# The resources are private and intended for a single user. They must not be stored by a shared cache (e.g CDN).
spring.resources.cache.cachecontrol.cache-private= true

# The resources are public and any cache may store the response.
#spring.resources.cache.cachecontrol.cache-public= # set a boolean value true/false

#Connection Pool With
spring.datasource.tomcat.initial-size=10000
spring.datasource.tomcat.max-wait=20000
spring.datasource.tomcat.max-active=30000
spring.datasource.tomcat.max-idle=2500
spring.datasource.tomcat.min-idle=1500
spring.datasource.tomcat.default-auto-commit=true 

#Tomcat Connection Properties
# Maximum queue length for incoming connection requests when all possible request processing threads are in use.
server.tomcat.accept-count=5000
# Delay between the invocation of backgroundProcess methods. If a duration suffix is not specified, seconds will be used.
server.tomcat.background-processor-delay=00s
# Maximum number of connections that the server accepts and processes at any given time.
server.tomcat.max-connections=10000
# Maximum size in bytes of the HTTP message header.
server.max-http-header-size=10MB
#The maximum size of a request body
server.tomcat.max-swallow-size=10MB
# Maximum size in bytes of the HTTP post content.
server.tomcat.max-http-form-post-size=10MB
# Maximum amount of worker threads.
server.tomcat.threads.max=10000
# Minimum amount of worker threads.
server.tomcat.threads.min-spare=5000

# Hibernate specific properties
spring.jpa.show-sql=false
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.id.new_generator_mappings=false

# MULTIPART (MultipartProperties)
# Whether to enable support of multipart uploads.
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=25MB
# Intermediate location of uploaded files.
#spring.servlet.multipart.location=/data/upload_tmp
# Max file size.
spring.servlet.multipart.max-file-size=20MB
# Max request size.
spring.servlet.multipart.max-request-size=20MB
# Whether to resolve the multipart request lazily at the time of file or parameter access.
spring.servlet.multipart.resolve-lazily=false

#hibernate.show_sql: true
#hibernate.hbm2ddl.auto: update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

